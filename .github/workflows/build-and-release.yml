name: Build and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  DOTNET_VERSION: '9.0.x'
  PROJECT_NAME: 'DotNetMcpServer2'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --no-restore --configuration Release
    
    - name: Test
      run: dotnet test --no-build --configuration Release --verbosity normal

  build-and-publish:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    strategy:
      matrix:
        target: [
          { rid: 'win-x64', os: 'windows', arch: 'x64' },
          { rid: 'win-arm64', os: 'windows', arch: 'arm64' },
          { rid: 'linux-x64', os: 'linux', arch: 'x64' },
          { rid: 'linux-arm64', os: 'linux', arch: 'arm64' },
          { rid: 'osx-x64', os: 'macos', arch: 'x64' },
          { rid: 'osx-arm64', os: 'macos', arch: 'arm64' }
        ]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Publish ${{ matrix.target.rid }}
      run: |
        dotnet publish ${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj \
          --configuration Release \
          --runtime ${{ matrix.target.rid }} \
          --self-contained true \
          --output ./publish/${{ matrix.target.rid }} \
          -p:PublishSingleFile=true \
          -p:EnableCompressionInSingleFile=true \
          -p:DebugType=None \
          -p:DebugSymbols=false
    
    - name: Create archive (Windows)
      if: matrix.target.os == 'windows'
      run: |
        cd ./publish/${{ matrix.target.rid }}
        zip -r ../../${{ env.PROJECT_NAME }}-${{ matrix.target.rid }}.zip .
    
    - name: Create archive (Unix)
      if: matrix.target.os != 'windows'
      run: |
        cd ./publish/${{ matrix.target.rid }}
        tar -czf ../../${{ env.PROJECT_NAME }}-${{ matrix.target.rid }}.tar.gz .
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PROJECT_NAME }}-${{ matrix.target.rid }}
        path: |
          ${{ env.PROJECT_NAME }}-${{ matrix.target.rid }}.zip
          ${{ env.PROJECT_NAME }}-${{ matrix.target.rid }}.tar.gz
        retention-days: 90

  create-release:
    needs: build-and-publish
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          **/${{ env.PROJECT_NAME }}-*.zip
          **/${{ env.PROJECT_NAME }}-*.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository_owner }}/${{ env.PROJECT_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
