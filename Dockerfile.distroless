# Ultra-minimal Dockerfile using Google Distroless static image
# This provides slightly more features than scratch but still minimal (~12-18MB total)

# Stage 1: Build the AOT executable
FROM mcr.microsoft.com/dotnet/sdk:9.0 AS build

WORKDIR /src

# Copy project files
COPY global.json ./
COPY Directory.Build.props ./
COPY DotNetMcpServer2.sln ./
COPY DotNetMcpServer2/ ./DotNetMcpServer2/
COPY DotNetMcpServer2.Tests/ ./DotNetMcpServer2.Tests/

# Restore and build AOT for Linux x64 with maximum optimization
RUN dotnet restore DotNetMcpServer2/DotNetMcpServer2.csproj && \
    dotnet publish DotNetMcpServer2/DotNetMcpServer2.csproj \
    --configuration Release \
    --runtime linux-x64 \
    --self-contained true \
    --output /app/publish \
    -p:PublishAot=true \
    -p:OptimizationPreference=Size \
    -p:IlcOptimizationPreference=Size \
    -p:StripSymbols=true \
    --verbosity minimal

# Verify the executable
RUN ls -la /app/publish/ && \
    file /app/publish/DotNetMcpServer2 && \
    du -h /app/publish/DotNetMcpServer2 && \
    chmod +x /app/publish/DotNetMcpServer2

# Stage 2: Ultra-minimal runtime using Google Distroless static
# This includes CA certificates and timezone data but no package manager or shell
FROM gcr.io/distroless/static-debian12:nonroot

# Copy only the AOT executable
COPY --from=build --chown=nonroot:nonroot /app/publish/DotNetMcpServer2 /DotNetMcpServer2

# Set environment variables for optimal performance
ENV DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=1 \
    DOTNET_CLI_TELEMETRY_OPTOUT=1 \
    DOTNET_NOLOGO=1

# Use non-root user (already configured in distroless)
USER nonroot

ENTRYPOINT ["/DotNetMcpServer2"]
